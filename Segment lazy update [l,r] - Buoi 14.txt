#include <bits/stdc++.h>
#define ll long long
#define fi first
#define se second 
#define int ll 
using namespace std;
typedef pair<ll,ll> pll;
const int N = 2e5 + 1000;
vector <pll> lazy[4*N];
ll T[4*N];
ll la[4*N], n , q;
ll sum(ll x){
  return x*(x+1)/2;
}
void lazy_up(int k,int l,int r, int value)
{
    // T[k] += sum(r-l)*A + (r-l+1)*((l-lx)*A);
    for (int i = 0; i < lazy[k].size(); i++){
      T[k] += sum(r-l)*lazy[k][i].se + (r-l+1)*((l-lazy[k][i].fi)*lazy[k][i].se);
    }
    T[k] += (r - l + 1) * value;
    if (l < r)
    {
        la[2*k] += value;
        la[2*k+1] += value;
        for (auto x : lazy[k]) lazy[2*k].push_back(x);
        for (auto x : lazy[k]) lazy[2*k+1].push_back(x);
    }
    la[k] = 0;
    lazy[k].clear();
}
void update(int k, int l, int r, int u, int v, int A, int B){
  lazy_up(k,l,r,la[k]);
  if (l > v || r < u) return;
  if (l >= u && r <= v){
    lazy[k].push_back({u,A});
    lazy_up(k,l,r,B);
    return;
  }
  int mid = (l + r) >> 1;
  update(2*k,l,mid,u,v,A,B);
  update(2*k+1,mid+1,r,u,v,A,B);
  T[k] = T[2*k] + T[2*k+1];
}
ll query(int k, int l, int r, int u, int v){
  lazy_up(k,l,r,la[k]);
  if (l > v || r < u) return 0;
  if (l >= u && r <= v) return T[k];
  int mid = (l + r) >> 1;
  return query(k<<1,l,mid,u,v) + query(k<<1|1,mid+1,r,u,v);
}
signed main()
{
    // n q
    // l r -> a[u] + a[u + 1] + ... + a[v] l <= u <= v <= r
    cin >> n >> q;
    while (q--){
      int tt; cin >> tt;
      if (tt==1){
        int l,r,A,B; cin >> l >> r >> A >> B;
        update(1,1,n,l,r,A,B);
      }
      else{
        int l,r; cin >> l >> r;
        cout << query(1,1,n,l,r) << "\n";
      }
      // for (int i = 1; i <= n; i++) cout << query(1,1,n,i,i) << " "; cout << "\n";
    }
    return 0;
}